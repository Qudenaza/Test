{"version":3,"sources":["const.ts","store/root-reducer.ts","services/adapter.ts","store/goods/goods.ts","store/meta/meta.ts","store/cart/cart.ts","store/goods/selectors.ts","components/goods-item/goods-item.tsx","hooks/useComponentDidMount.ts","store/meta/selectors.ts","components/goods-list/goods-list.tsx","components/goods/goods.tsx","utils/common.ts","components/cart-item/cart-item.tsx","store/cart/selectors.ts","components/cart-table/cart-table.tsx","components/cart/cart.tsx","components/app/app.tsx","store/store.ts","index.js"],"names":["HighlightColors","GoodsKeys","ExchangeRate","NameSpace","adaptToClient","goods","hash","forEach","item","Group","push","fetchData","createAsyncThunk","a","data","Value","Goods","fetchNames","names","dataSlice","createSlice","name","initialState","reducers","updateCount","state","action","payload","groupId","find","GoodID","id","GoodCount","count","extraReducers","builder","addCase","fulfilled","actions","metaSlice","updateRate","USD","cartSlice","selectedGoods","totalPrice","addGood","findIndex","removeGood","index","splice","updateTotalPrice","reduce","prevValue","currentValue","price","rootReducer","combineReducers","Meta","meta","Cart","cart","selectGoods","selectNames","GoodsItem","goodsGroup","goodParams","exchangeRate","useState","currentRate","setRate","GREY","color","setColor","isComponentMounted","ref","useRef","useEffect","current","useComponentDidMount","GoodsList","GoodName","dispatch","useDispatch","GREEN","RED","setTimeout","className","onClick","good","GoodPrice","maxCount","style","backgroundColor","toFixed","React","memo","selectExchangeRate","Infinity","goodsList","useSelector","isExpanded","setExpanded","cn","map","setInterval","min","max","Math","floor","random","Object","keys","length","CartItem","goodData","setCount","setPrice","updateInitialCount","type","value","onChange","evt","target","onKeyPress","preventDefault","selectTotalPrice","CartTable","App","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cd15425.chunk.js","sourcesContent":["export enum HighlightColors {\r\n  GREEN = '#6bedc3',\r\n  RED = '#ff2169',\r\n  GREY = '#ddd8d8',\r\n}\r\n\r\nexport enum GoodsKeys {\r\n  Group = 'G',\r\n  GoodsList = 'B',\r\n  GoodID = 'T',\r\n  GoodPrice = 'C',\r\n  GoodName = 'N',\r\n  GoodCount = 'P',\r\n  GoodInCart = 'S',\r\n}\r\n\r\nexport enum ExchangeRate  {\r\n  USD = 'USD/RUB',\r\n}\r\n\r\nexport const MIN_EXCHANGE_RATE = 20;\r\n\r\nexport const MAX_EXCHANGE_RATE = 80;\r\n\r\nexport const SERVER_INTERVAL = 15000;","import { combineReducers } from 'redux';\r\nimport goods from './goods/goods';\r\nimport meta from './meta/meta';\r\nimport cart from './cart/cart';\r\n\r\nexport enum NameSpace {\r\n  Goods = 'GOODS',\r\n  Meta = 'META',\r\n  Cart = 'CART',\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n  [NameSpace.Goods]: goods,\r\n  [NameSpace.Meta]: meta,\r\n  [NameSpace.Cart]: cart,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;","import { GoodsKeys } from '../const';\r\nimport { AdaptedGoodsData, GoodsData } from '../types/state'\r\n\r\nexport const adaptToClient = (goods: GoodsData[]): AdaptedGoodsData => {\r\n  const hash: AdaptedGoodsData = {};\r\n  \r\n  goods.forEach((item) => {\r\n    if (hash[item[GoodsKeys.Group]]) {\r\n      return hash[item[GoodsKeys.Group]].push(item);\r\n    }\r\n\r\n    return hash[item[GoodsKeys.Group]] = [item];\r\n  });\r\n  \r\n\r\n  return hash;\r\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { GoodsState } from '../../types/state';\r\nimport { adaptToClient } from '../../services/adapter';\r\nimport data from '../../mockServer/data.json';\r\nimport names from '../../mockServer/names.json';\r\nimport { GoodsKeys } from '../../const';\r\n\r\nconst fetchData = createAsyncThunk(\r\n  'goods/fetchData',\r\n  async () => {\r\n    const { Goods } = await data.Value\r\n\r\n    return adaptToClient(Goods);\r\n  },\r\n);\r\n\r\nconst fetchNames = createAsyncThunk(\r\n  'goods/fetchNames',\r\n  async () => {\r\n    const data = await names;\r\n\r\n    return data;\r\n  },\r\n);\r\n\r\nconst initialState: GoodsState = {\r\n  goods: {},\r\n  names: {},\r\n};\r\n\r\nconst dataSlice = createSlice({\r\n  name: 'data',\r\n  initialState,\r\n  reducers: {\r\n    updateCount(state, action) {  \r\n      const item = state.goods[action.payload.groupId].find((item) => item[GoodsKeys.GoodID] === action.payload.id);\r\n      \r\n      item![GoodsKeys.GoodCount] = action.payload.count;\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchData.fulfilled, (state, action) => {\r\n        state.goods = action.payload;\r\n      })\r\n      .addCase(fetchNames.fulfilled, (state, action) => {\r\n        state.names = action.payload;\r\n      });\r\n    }\r\n});\r\n\r\nexport { fetchData, fetchNames };\r\nexport const { updateCount } = dataSlice.actions;\r\nexport default dataSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { ExchangeRate } from '../../const';\r\n\r\nconst initialState: {\r\n  [key: string]: number;\r\n} = {\r\n  'USD/RUB': 76.88,\r\n};\r\n\r\nconst metaSlice = createSlice({\r\n  name: 'meta',\r\n  initialState,\r\n  reducers: {\r\n    updateRate(state, action) {\r\n      state[ExchangeRate.USD] = action.payload;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { updateRate } = metaSlice.actions;\r\nexport default metaSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { SelectedGoodsState } from '../../types/state';\r\n\r\nconst initialState: SelectedGoodsState = {\r\n  selectedGoods: [],\r\n  totalPrice: 0,\r\n}\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    addGood(state, action) {\r\n      const index = state.selectedGoods.findIndex((item) => item.id === action.payload.id);\r\n      \r\n      if (index !== -1) {\r\n        return;\r\n      }\r\n\r\n      state.selectedGoods.push(action.payload);\r\n    },\r\n    removeGood(state, action) {\r\n      const index = state.selectedGoods.findIndex((item) => item.id === action.payload.id);\r\n\r\n      state.selectedGoods.splice(index, 1);\r\n    },\r\n    updateTotalPrice(state) {\r\n      state.totalPrice = state.selectedGoods.reduce((prevValue, currentValue) => {\r\n        const currentValuePrice = currentValue.price * currentValue.count;\r\n\r\n        return prevValue + currentValuePrice;\r\n\r\n      }, 0)\r\n    },\r\n    updateCount(state, action) {\r\n      const item = state.selectedGoods.find((item) => item.id === action.payload.id);      \r\n\r\n      item!.count = action.payload.count;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { addGood, removeGood, updateCount, updateTotalPrice } = cartSlice.actions\r\nexport default cartSlice.reducer;","import { State, GoodsNames, AdaptedGoodsData } from '../../types/state';\r\nimport { NameSpace } from '../root-reducer';\r\n\r\nexport const selectGoods = (state: State): AdaptedGoodsData => state[NameSpace.Goods].goods;\r\nexport const selectSingleGood = (id: number) => (state: State) => state[NameSpace.Goods].names[id];\r\nexport const selectNames = (state: State): GoodsNames => state[NameSpace.Goods].names;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { GoodsKeys } from '../../const';\r\nimport { GoodsData, GoodsGroup } from '../../types/state';\r\nimport { addGood } from '../../store/cart/cart';\r\nimport { HighlightColors } from '../../const';\r\nimport { useComponentDidMount } from '../../hooks/useComponentDidMount';\r\nimport '../../assets/scss/blocks/goods.scss';\r\n\r\ntype Props = {\r\n  goodParams: GoodsData;\r\n  goodsGroup: GoodsGroup;\r\n  exchangeRate: number;\r\n};\r\n\r\nfunction GoodsItem({ goodsGroup, goodParams, exchangeRate }: Props): JSX.Element | null {\r\n  const [currentRate, setRate] = useState(exchangeRate);\r\n  const [color, setColor] = useState(HighlightColors.GREY);\r\n  const isComponentMounted = useComponentDidMount();\r\n  const name = goodsGroup[GoodsKeys.GoodsList][goodParams[GoodsKeys.GoodID]][GoodsKeys.GoodName];\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isComponentMounted) {\r\n      setColor(currentRate > exchangeRate ? HighlightColors.GREEN : HighlightColors.RED);\r\n\r\n      setRate(exchangeRate);\r\n\r\n      setTimeout(() => {\r\n        setColor(HighlightColors.GREY);\r\n      }, 200);\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [exchangeRate]);\r\n\r\n  if (!goodParams[GoodsKeys.GoodCount]) {\r\n    return null;\r\n  }\r\n\r\n  const handleGoodsItemClick = () => {\r\n    const good = {\r\n      id: goodParams[GoodsKeys.GoodID],\r\n      groupId: goodParams[GoodsKeys.Group],\r\n      name: name,\r\n      price: +goodParams[GoodsKeys.GoodPrice],\r\n      maxCount: goodParams[GoodsKeys.GoodCount],\r\n      count: 1,\r\n    };\r\n\r\n    dispatch(addGood(good));\r\n  };\r\n\r\n  return (\r\n    <div className='goods__item' onClick={handleGoodsItemClick}>\r\n      <div className='goods__name'>\r\n        {name}\r\n        <span className='goods__count'>({goodParams[GoodsKeys.GoodCount]})</span>\r\n      </div>\r\n      <div className='goods__price' style={{ backgroundColor: color }}>\r\n        {(goodParams[GoodsKeys.GoodPrice] * exchangeRate).toFixed(2)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(GoodsItem);\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport const useComponentDidMount = () => {\r\n  const ref = useRef(false);\r\n\r\n  useEffect(() => {\r\n    ref.current = true;\r\n\r\n  }, []);\r\n  \r\n  return ref.current;\r\n};","import { State } from '../../types/state';\r\nimport { NameSpace } from '../root-reducer';\r\nimport { ExchangeRate } from '../../const';\r\n\r\nexport const selectExchangeRate = (state: State) => state[NameSpace.Meta][ExchangeRate.USD];\r\n","import React, { useState } from 'react';\r\nimport GoodsItem from '../goods-item/goods-item';\r\nimport { GoodsKeys } from '../../const';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectSingleGood } from '../../store/goods/selectors';\r\nimport { selectExchangeRate } from '../../store/meta/selectors';\r\nimport { GoodsData } from '../../types/state';\r\nimport cn from 'classnames';\r\nimport '../../assets/scss/blocks/goods.scss';\r\n\r\ntype Props = {\r\n  groupId: number;\r\n  goodsList: GoodsData[];\r\n};\r\n\r\nfunction GoodsList({ groupId = Infinity, goodsList }: Props): JSX.Element | null {\r\n  const goodsGroup = useSelector(selectSingleGood(groupId));\r\n  const exchangeRate = useSelector(selectExchangeRate);\r\n  const [isExpanded, setExpanded] = useState(true);\r\n\r\n  if (!goodsGroup) {\r\n    return <h1>Loading...</h1>;\r\n  }\r\n\r\n  return (\r\n    <div className={cn('goods__list', { 'goods__list--expanded': isExpanded })}>\r\n      <h2 className='goods__title' onClick={() => setExpanded(!isExpanded)}>\r\n        {goodsGroup[GoodsKeys.Group]}\r\n      </h2>\r\n      <div className='goods__wrapper'>\r\n        {goodsList.map((item) => {\r\n          return <GoodsItem goodParams={item} key={item[GoodsKeys.GoodID]} goodsGroup={goodsGroup} exchangeRate={exchangeRate} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(GoodsList);\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchData, fetchNames } from '../../store/goods/goods';\r\nimport { selectGoods, selectNames } from '../../store/goods/selectors';\r\nimport { AppDispatch } from '../../store/store';\r\nimport GoodsList from '../goods-list/goods-list';\r\nimport { updateRate } from '../../store/meta/meta';\r\nimport { getRandomInteger } from '../../utils/common';\r\nimport { MIN_EXCHANGE_RATE, MAX_EXCHANGE_RATE, SERVER_INTERVAL } from '../../const';\r\nimport '../../assets/scss/blocks/goods.scss';\r\n\r\nfunction Goods(): JSX.Element {\r\n  const goods = useSelector(selectGoods);\r\n  const names = useSelector(selectNames);\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchData());\r\n    dispatch(fetchNames());\r\n\r\n    setInterval(() => {\r\n      dispatch(updateRate(getRandomInteger(MIN_EXCHANGE_RATE, MAX_EXCHANGE_RATE)));\r\n      // dispatch(fetchData());\r\n    }, SERVER_INTERVAL);\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  if (!goods || !names) {\r\n    return <h1>Loading...</h1>;\r\n  }\r\n\r\n  return (\r\n    <section className='goods container'>\r\n      {Object.keys(goods).map((id) => {\r\n        if (!goods[id].length) {\r\n          return null;\r\n        }\r\n\r\n        return <GoodsList groupId={+id} key={id} goodsList={goods[id]} />;\r\n      })}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default React.memo(Goods);\r\n","export const getRandomInteger = (min: number, max: number): number => Math.floor(min + Math.random() * (max + 1 - min));\r\n","import { ChangeEvent, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { SelectedGood } from '../../types/state';\r\nimport { updateCount as updateInitialCount } from '../../store/goods/goods';\r\nimport { updateTotalPrice, removeGood, updateCount } from '../../store/cart/cart';\r\nimport '../../assets/scss/blocks/cart.scss';\r\n\r\ntype Props = {\r\n  goodData: SelectedGood;\r\n  exchangeRate: number;\r\n};\r\n\r\nfunction CartItem({ goodData, exchangeRate }: Props): JSX.Element {\r\n  const [count, setCount] = useState(goodData.count);\r\n  const [price, setPrice] = useState(goodData.price);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      updateCount({\r\n        count: count,\r\n        id: goodData.id,\r\n      })\r\n    );\r\n\r\n    dispatch(\r\n      updateInitialCount({\r\n        groupId: goodData.groupId,\r\n        id: goodData.id,\r\n        count: goodData.maxCount - count,\r\n      })\r\n    );\r\n\r\n    dispatch(updateTotalPrice());\r\n\r\n    // eslint-disable-next-line\r\n  }, [count]);\r\n\r\n  const handleCountChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const value = +evt.target.value;\r\n\r\n    setPrice(value * goodData.price);\r\n\r\n    setCount(value);\r\n  };\r\n\r\n  const handleRemoveButtonClick = () => {\r\n    dispatch(removeGood(goodData.id));\r\n\r\n    dispatch(updateTotalPrice());\r\n\r\n    dispatch(\r\n      updateInitialCount({\r\n        groupId: goodData.groupId,\r\n        id: goodData.id,\r\n        count: goodData.maxCount,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <tr className='cart__item'>\r\n      <td className='cart__table-cell'>{goodData.name}</td>\r\n      <td className='cart__table-cell'>\r\n        <input type='number' className='cart__input' value={count} onChange={handleCountChange} min='0' max={goodData.maxCount} onKeyPress={(evt) => evt.preventDefault()} />\r\n      </td>\r\n      <td className='cart__table-cell cart__table-cell--price'>\r\n        {(price * exchangeRate).toFixed(2)} руб <span>/ шт.</span>\r\n      </td>\r\n      <td>\r\n        <button className='cart__delete' onClick={handleRemoveButtonClick}>\r\n          Удалить\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default CartItem;\r\n","import { State } from '../../types/state';\r\nimport { NameSpace } from '../root-reducer';\r\n\r\nexport const selectGood = (id: number) => (state: State) => state[NameSpace.Cart].selectedGoods.find((item) => item.id === id);\r\nexport const selectGoods = (state: State) => state[NameSpace.Cart].selectedGoods;\r\nexport const selectTotalPrice = (state: State) => state[NameSpace.Cart].totalPrice;\r\n","import CartItem from '../cart-item/cart-item';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectTotalPrice } from '../../store/cart/selectors';\r\nimport { selectExchangeRate } from '../../store/meta/selectors';\r\nimport { SelectedGood } from '../../types/state';\r\nimport '../../assets/scss/blocks/cart.scss';\r\n\r\ntype Props = {\r\n  goods: SelectedGood[];\r\n};\r\n\r\nfunction CartTable({ goods }: Props): JSX.Element {\r\n  const exchangeRate = useSelector(selectExchangeRate);\r\n  const totalPrice = useSelector(selectTotalPrice);\r\n\r\n  return (\r\n    <table className='cart__table'>\r\n      <thead>\r\n        <tr className='cart__table-heading'>\r\n          <th className='cart__table-cell'>Наименование товара и описание</th>\r\n          <th className='cart__table-cell'>Количество</th>\r\n          <th className='cart__table-cell'>Цена</th>\r\n          <th></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {goods.map((item) => (\r\n          <CartItem goodData={item} key={item.id} exchangeRate={exchangeRate} />\r\n        ))}\r\n      </tbody>\r\n      <tfoot>\r\n        <tr>\r\n          <td></td>\r\n          <td></td>\r\n          <td className='cart__total-amount'>\r\n            Общая стоимость: <span>{(totalPrice * exchangeRate).toFixed(2)} руб.</span>\r\n          </td>\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default CartTable;\r\n","import { useSelector } from 'react-redux';\r\nimport CartTable from '../cart-table/cart-table';\r\nimport { selectGoods } from '../../store/cart/selectors';\r\nimport '../../assets/scss/blocks/cart.scss';\r\n\r\nfunction Cart(): JSX.Element | null {\r\n  const goods = useSelector(selectGoods);\r\n\r\n  if (!goods.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <section className='cart container'>\r\n      <CartTable goods={goods} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Cart;\r\n","import Goods from '../goods/goods';\r\nimport Cart from '../cart/cart';\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <>\r\n      <Goods />\r\n      <Cart />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { rootReducer } from './root-reducer';\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport './assets/scss/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}